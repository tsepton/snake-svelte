{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "Gameboard.svelte",
    "Settings.svelte",
    "Gameboard.svelte",
    "Gameboard.svelte",
    "Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Game from \"./game\";\n  import Snake from \"./snake\";\n  import Settings from \"./Components/Settings.svelte\";\n  import Gameboard from \"./Components/Gameboard.svelte\";\n\n  let game = new Game(10, 1);\n  let snake = new Snake(game, 0, 0);\n</script>\n\n<style>\n  #screen {\n    display: grid;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    grid-gap: 1rem;\n    grid-template-columns: 1fr 5fr;\n  }\n\n  #settings {\n    height: 100%;\n    width: 100%;\n    background-color: #f5f5f5;\n  }\n\n  #gameboard {\n    height: 100%;\n    width: 100%;\n    background-color: #ffff;\n  }\n</style>\n\n<div id=\"screen\">\n  <div id=\"settings\">\n    <Settings {snake} {game} />\n  </div>\n  <div id=\"gameboard\">\n    <Gameboard {snake} {game} />\n  </div>\n</div>\n",
    "<script>\n  export let snake;\n  export let game;\n\n  let keyPressed;\n  let interval;\n  let move = () => {\n    switch (keyPressed) {\n      case \"z\":\n        snake.up();\n        break;\n      case \"s\":\n        snake.down();\n        break;\n      case \"q\":\n        snake.left();\n        break;\n      case \"d\":\n        snake.right();\n        break;\n    }\n    // svelte only renders new assignements...\n    snake = snake;\n  };\n\n  // handling movements\n  document.onkeypress = (e) => {\n    keyPressed = e.key;\n    move();\n    clearInterval(interval);\n    interval = setInterval(() => {\n      move();\n    }, 1000 / game.difficulty);\n  };\n</script>\n\n<style>\n  #gameboard {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    height: 100%;\n  }\n\n  h2 {\n    width: 100%;\n    font-weight: 200;\n    text-align: center;\n  }\n\n  .row {\n    flex-direction: column;\n  }\n\n  .game-square-0 {\n    width: 3rem;\n    height: 3rem;\n    background-color: #40444f;\n  }\n\n  .game-square-1 {\n    width: 3rem;\n    height: 3rem;\n    background-color: #535865;\n  }\n\n  [head=\"true\"] {\n    background-color: #3bb273;\n    border-radius: 30px;\n  }\n\n  [tail=\"true\"] {\n    background-color: #66cc96;\n  }\n\n  [candy=\"true\"] {\n    background-color: #c45baa;\n  }\n</style>\n\n<h2>Gameboard</h2>\n<div id=\"gameboard\">\n  {#each Array(game.size) as _, x}\n    <div class={'row'}>\n      {#each Array(game.size) as _, y}\n        <div\n          class={`game-square-${(y + x) % 2}`}\n          head={JSON.stringify(snake.head) === JSON.stringify([x, y])}\n          tail={snake.tail.includes([x, y])}\n          candy={game.candies.includes([x, y])} />\n      {/each}\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  //export let snake;\n  export let game;\n</script>\n\n<style>\n  #settings {\n    width: 100%;\n    height: min-content;\n    text-align: center;\n  }\n\n  h2 {\n    font-weight: 100;\n  }\n</style>\n\n<div id=\"settings\">\n  <h2>Game Settings</h2>\n  <div>\n    <p>Difficulty :</p><input type=\"number\" bind:value={game.difficulty} />\n  </div>\n  <div>\n    <p>Size :</p><input type=\"number\" bind:value={game.size} />\n  </div>\n</div>\n",
    "<script>\n  export let snake;\n  export let game;\n\n  let keyPressed;\n  let interval;\n  let move = () => {\n    switch (keyPressed) {\n      case \"z\":\n        snake.up();\n        break;\n      case \"s\":\n        snake.down();\n        break;\n      case \"q\":\n        snake.left();\n        break;\n      case \"d\":\n        snake.right();\n        break;\n    }\n    // svelte only renders new assignements...\n    snake = snake;\n  };\n\n  // handling movements\n  document.onkeypress = (e) => {\n    keyPressed = e.key;\n    move();\n    clearInterval(interval);\n    interval = setInterval(() => {\n      move();\n    }, 1000 / game.difficulty);\n  };\n</script>\n\n<style>\n  #gameboard {\n    display: flex;\n    justify-content: center;\n    border: 2px solid red;\n  }\n\n  .row {\n    flex-direction: column;\n  }\n\n  .game-square {\n    margin: 1px;\n    width: 5em;\n    height: 5em;\n    background-color: beige;\n  }\n\n  [head=\"true\"] {\n    background-color: blue;\n    border-radius: 30px;\n  }\n\n  [tail=\"true\"] {\n    background-color: red;\n  }\n\n  [candy=\"true\"] {\n    background-color: rosybrown;\n  }\n</style>\n\n<div id=\"gameboard\">\n  {#each Array(game.size) as _, x}\n    <div class={'row'}>\n      {#each Array(game.size) as _, y}\n        <div\n          class=\"game-square\"\n          head={JSON.stringify(snake.head) === JSON.stringify([x, y])}\n          tail={snake.tail.includes([x, y])}\n          candy={game.candies.includes([x, y])} />\n      {/each}\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  export let snake;\n  export let game;\n\n  let keyPressed;\n  let interval;\n  let move = () => {\n    switch (keyPressed) {\n      case \"z\":\n        snake.up();\n        break;\n      case \"s\":\n        snake.down();\n        break;\n      case \"q\":\n        snake.left();\n        break;\n      case \"d\":\n        snake.right();\n        break;\n    }\n    // svelte only renders new assignements...\n    snake = snake;\n  };\n\n  // handling movements\n  document.onkeypress = (e) => {\n    keyPressed = e.key;\n    move();\n    clearInterval(interval);\n    interval = setInterval(() => {\n      move();\n    }, 1000 / game.difficulty);\n  };\n</script>\n\n<style>\n  #gameboard {\n    display: flex;\n    justify-content: center;\n    width: min-content\n  }\n\n  .row {\n    flex-direction: column;\n  }\n\n  .game-square {\n    margin: 1px;\n    width: 5em;\n    height: 5em;\n    background-color: beige;\n  }\n\n  [head=\"true\"] {\n    background-color: blue;\n    border-radius: 30px;\n  }\n\n  [tail=\"true\"] {\n    background-color: red;\n  }\n\n  [candy=\"true\"] {\n    background-color: rosybrown;\n  }\n</style>\n\n<div id=\"gameboard\">\n  {#each Array(game.size) as _, x}\n    <div class={'row'}>\n      {#each Array(game.size) as _, y}\n        <div\n          class=\"game-square\"\n          head={JSON.stringify(snake.head) === JSON.stringify([x, y])}\n          tail={snake.tail.includes([x, y])}\n          candy={game.candies.includes([x, y])} />\n      {/each}\n    </div>\n  {/each}\n</div>\n",
    "<script>\n  //export let snake;\n  export let game;\n</script>\n\n<style>\n  #settings {\n    width: min-content;\n    border: 2px solid red;\n    height: 100%;\n  }\n\n  h2 {\n    font-weight: 100;\n  }\n</style>\n\n<div id=\"settings\">\n  <h2>Game Settings</h2>\n  Difficulty : <input type=\"number\" bind:value={game.difficulty} /> Size : <input type=\"number\" bind:value={game.size} />\n</div>\n"
  ],
  "names": [],
  "mappings": "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"
}